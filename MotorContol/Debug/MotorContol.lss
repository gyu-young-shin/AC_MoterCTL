
MotorContol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  000004b4  00000548  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000022  00800064  00800064  0000054c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000054c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000057c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  000005b8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000997  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005ea  00000000  00000000  00000fe7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000778  00000000  00000000  000015d1  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001d4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000425  00000000  00000000  00001e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fe  00000000  00000000  00002235  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  00002333  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	30 c2       	rjmp	.+1120   	; 0x464 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	c6 c1       	rjmp	.+908    	; 0x3a0 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e4 eb       	ldi	r30, 0xB4	; 180
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a4 36       	cpi	r26, 0x64	; 100
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a4 e6       	ldi	r26, 0x64	; 100
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a6 38       	cpi	r26, 0x86	; 134
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	d6 d0       	rcall	.+428    	; 0x206 <main>
  5a:	2a c2       	rjmp	.+1108   	; 0x4b0 <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <read_input>:
	cli(); // 인터럽트 비활성화 (원자적 접근을 위해)
	millis_copy = timer_millis;
	sei(); // 인터럽트 활성화
	
	return millis_copy;
}
  5e:	85 9b       	sbis	0x10, 5	; 16
  60:	02 c0       	rjmp	.+4      	; 0x66 <read_input+0x8>
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	01 c0       	rjmp	.+2      	; 0x68 <read_input+0xa>
  66:	82 e0       	ldi	r24, 0x02	; 2
  68:	86 99       	sbic	0x10, 6	; 16
  6a:	02 c0       	rjmp	.+4      	; 0x70 <read_input+0x12>
  6c:	81 60       	ori	r24, 0x01	; 1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <read_input+0x14>
  70:	8e 7f       	andi	r24, 0xFE	; 254
  72:	87 99       	sbic	0x10, 7	; 16
  74:	06 c0       	rjmp	.+12     	; 0x82 <read_input+0x24>
  76:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <SpeedInput>
  7a:	92 60       	ori	r25, 0x02	; 2
  7c:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <SpeedInput>
  80:	05 c0       	rjmp	.+10     	; 0x8c <read_input+0x2e>
  82:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <SpeedInput>
  86:	9d 7f       	andi	r25, 0xFD	; 253
  88:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <SpeedInput>
  8c:	b0 99       	sbic	0x16, 0	; 22
  8e:	06 c0       	rjmp	.+12     	; 0x9c <read_input+0x3e>
  90:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <SpeedInput>
  94:	91 60       	ori	r25, 0x01	; 1
  96:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <SpeedInput>
  9a:	05 c0       	rjmp	.+10     	; 0xa6 <read_input+0x48>
  9c:	90 91 6b 00 	lds	r25, 0x006B	; 0x80006b <SpeedInput>
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <SpeedInput>
  a6:	83 70       	andi	r24, 0x03	; 3
  a8:	08 95       	ret

000000aa <InputSwitch_PD3>:
  aa:	80 b3       	in	r24, 0x10	; 16
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	28 2f       	mov	r18, r24
  b0:	28 70       	andi	r18, 0x08	; 8
  b2:	83 fd       	sbrc	r24, 3
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <switchBuffer>
  ba:	22 23       	and	r18, r18
  bc:	c1 f0       	breq	.+48     	; 0xee <InputSwitch_PD3+0x44>
  be:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <switchBuffer+0x1>
  c2:	81 11       	cpse	r24, r1
  c4:	14 c0       	rjmp	.+40     	; 0xee <InputSwitch_PD3+0x44>
  c6:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <switchBuffer+0x2>
  ca:	81 11       	cpse	r24, r1
  cc:	10 c0       	rjmp	.+32     	; 0xee <InputSwitch_PD3+0x44>
  ce:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <switchBuffer+0x3>
  d2:	81 11       	cpse	r24, r1
  d4:	0c c0       	rjmp	.+24     	; 0xee <InputSwitch_PD3+0x44>
  d6:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <switchBuffer+0x4>
  da:	81 11       	cpse	r24, r1
  dc:	08 c0       	rjmp	.+16     	; 0xee <InputSwitch_PD3+0x44>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <F_Switch_PD3>
  e4:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <PrePD3>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	41 f4       	brne	.+16     	; 0xfc <InputSwitch_PD3+0x52>
  ec:	08 95       	ret
  ee:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <F_Switch_PD3>
  f2:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <PrePD3>
  f6:	88 23       	and	r24, r24
  f8:	91 f0       	breq	.+36     	; 0x11e <InputSwitch_PD3+0x74>
  fa:	06 c0       	rjmp	.+12     	; 0x108 <InputSwitch_PD3+0x5e>
  fc:	81 e0       	ldi	r24, 0x01	; 1
  fe:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <eeprom_en>
 102:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <time_delay>
 106:	07 c0       	rjmp	.+14     	; 0x116 <InputSwitch_PD3+0x6c>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <F_MoterBi>
 10e:	91 11       	cpse	r25, r1
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <F_MoterBi>
 116:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <F_Switch_PD3>
 11a:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <PrePD3>
 11e:	08 95       	ret

00000120 <InputSwitch_PD3_PD4>:
 120:	80 b3       	in	r24, 0x10	; 16
 122:	91 e0       	ldi	r25, 0x01	; 1
 124:	38 2f       	mov	r19, r24
 126:	38 70       	andi	r19, 0x08	; 8
 128:	83 fd       	sbrc	r24, 3
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <switchBuf>
 130:	80 b3       	in	r24, 0x10	; 16
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	28 2f       	mov	r18, r24
 136:	20 71       	andi	r18, 0x10	; 16
 138:	84 fd       	sbrc	r24, 4
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 74 00 	sts	0x0074, r25	; 0x800074 <switchBuf+0x5>
 140:	33 23       	and	r19, r19
 142:	a1 f0       	breq	.+40     	; 0x16c <InputSwitch_PD3_PD4+0x4c>
 144:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <switchBuf+0x1>
 148:	81 11       	cpse	r24, r1
 14a:	10 c0       	rjmp	.+32     	; 0x16c <InputSwitch_PD3_PD4+0x4c>
 14c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <switchBuf+0x2>
 150:	81 11       	cpse	r24, r1
 152:	0c c0       	rjmp	.+24     	; 0x16c <InputSwitch_PD3_PD4+0x4c>
 154:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <switchBuf+0x3>
 158:	81 11       	cpse	r24, r1
 15a:	08 c0       	rjmp	.+16     	; 0x16c <InputSwitch_PD3_PD4+0x4c>
 15c:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <switchBuf+0x4>
 160:	81 11       	cpse	r24, r1
 162:	04 c0       	rjmp	.+8      	; 0x16c <InputSwitch_PD3_PD4+0x4c>
 164:	81 e0       	ldi	r24, 0x01	; 1
 166:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <F_Switch_PD3>
 16a:	02 c0       	rjmp	.+4      	; 0x170 <InputSwitch_PD3_PD4+0x50>
 16c:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <F_Switch_PD3>
 170:	22 23       	and	r18, r18
 172:	a1 f0       	breq	.+40     	; 0x19c <InputSwitch_PD3_PD4+0x7c>
 174:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <switchBuf+0x6>
 178:	81 11       	cpse	r24, r1
 17a:	10 c0       	rjmp	.+32     	; 0x19c <InputSwitch_PD3_PD4+0x7c>
 17c:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <switchBuf+0x7>
 180:	81 11       	cpse	r24, r1
 182:	0c c0       	rjmp	.+24     	; 0x19c <InputSwitch_PD3_PD4+0x7c>
 184:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <switchBuf+0x8>
 188:	81 11       	cpse	r24, r1
 18a:	08 c0       	rjmp	.+16     	; 0x19c <InputSwitch_PD3_PD4+0x7c>
 18c:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <switchBuf+0x9>
 190:	81 11       	cpse	r24, r1
 192:	04 c0       	rjmp	.+8      	; 0x19c <InputSwitch_PD3_PD4+0x7c>
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <F_Switch_PD4>
 19a:	02 c0       	rjmp	.+4      	; 0x1a0 <InputSwitch_PD3_PD4+0x80>
 19c:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <F_Switch_PD4>
 1a0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <F_Switch_PD3>
 1a4:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <PrePD3>
 1a8:	89 17       	cp	r24, r25
 1aa:	71 f0       	breq	.+28     	; 0x1c8 <InputSwitch_PD3_PD4+0xa8>
 1ac:	88 23       	and	r24, r24
 1ae:	31 f0       	breq	.+12     	; 0x1bc <InputSwitch_PD3_PD4+0x9c>
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <eeprom_en>
 1b6:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <time_delay>
 1ba:	02 c0       	rjmp	.+4      	; 0x1c0 <InputSwitch_PD3_PD4+0xa0>
 1bc:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <F_MoterBi>
 1c0:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <F_Switch_PD3>
 1c4:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <PrePD3>
 1c8:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <F_Switch_PD4>
 1cc:	90 91 62 00 	lds	r25, 0x0062	; 0x800062 <PrePD4>
 1d0:	89 17       	cp	r24, r25
 1d2:	79 f0       	breq	.+30     	; 0x1f2 <InputSwitch_PD3_PD4+0xd2>
 1d4:	88 23       	and	r24, r24
 1d6:	31 f0       	breq	.+12     	; 0x1e4 <InputSwitch_PD3_PD4+0xc4>
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <eeprom_en>
 1de:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <time_delay>
 1e2:	03 c0       	rjmp	.+6      	; 0x1ea <InputSwitch_PD3_PD4+0xca>
 1e4:	81 e0       	ldi	r24, 0x01	; 1
 1e6:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <F_MoterBi>
 1ea:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <F_Switch_PD4>
 1ee:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <PrePD4>
 1f2:	08 95       	ret

000001f4 <timer0_init>:

// 타이머0 초기화 함수
void timer0_init(void)
{
	// 타이머0 클럭을 설정 (분주율 64)
	TCCR0 = (1 << CS01) | (1 << CS00);
 1f4:	83 e0       	ldi	r24, 0x03	; 3
 1f6:	83 bf       	out	0x33, r24	; 51

	// 타이머0 오버플로우 인터럽트 활성화
	TIMSK |= (1 << TOIE0);
 1f8:	89 b7       	in	r24, 0x39	; 57
 1fa:	81 60       	ori	r24, 0x01	; 1
 1fc:	89 bf       	out	0x39, r24	; 57

	// 전역 인터럽트 활성화
	sei();
 1fe:	78 94       	sei

	// 타이머0 초기값 설정 (195)
	TCNT0 = 239;//239;
 200:	8f ee       	ldi	r24, 0xEF	; 239
 202:	82 bf       	out	0x32, r24	; 50
 204:	08 95       	ret

00000206 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	DDRB &= ~(1 <<PB0);
 206:	b8 98       	cbi	0x17, 0	; 23
	DDRC &= ~(1 <<PD2);
 208:	a2 98       	cbi	0x14, 2	; 20
	DDRD &= ~((1 << PD3) | (1 << PD4));
 20a:	81 b3       	in	r24, 0x11	; 17
 20c:	87 7e       	andi	r24, 0xE7	; 231
 20e:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~((1 <<PD5)|(1 <<PD6) |(1 <<PD7));
 210:	81 b3       	in	r24, 0x11	; 17
 212:	8f 71       	andi	r24, 0x1F	; 31
 214:	81 bb       	out	0x11, r24	; 17
	DDRC |= (1 << PC3);
 216:	a3 9a       	sbi	0x14, 3	; 20
	
	DDRC |= (1 << PB1);
 218:	a1 9a       	sbi	0x14, 1	; 20
	DDRC |= (1 << PB2);
 21a:	a2 9a       	sbi	0x14, 2	; 20
	
	
	while(1)
	{
		F_MoterBi = eeprom_read_byte((uint8_t*)save_1); // read the byte in location 23
 21c:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 220:	d0 91 61 00 	lds	r29, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 224:	ce 01       	movw	r24, r28
 226:	2f d1       	rcall	.+606    	; 0x486 <eeprom_read_byte>
		
		F_MoterBi = F_MoterBi & 0x03;
 228:	83 70       	andi	r24, 0x03	; 3
 22a:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <F_MoterBi>
		
		if(F_MoterBi >= 0x03)
 22e:	83 30       	cpi	r24, 0x03	; 3
 230:	28 f0       	brcs	.+10     	; 0x23c <main+0x36>
		{
			F_MoterBi= 0;
 232:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <F_MoterBi>
			eeprom_write_byte( (uint8_t *)save_1, F_MoterBi); //  write the byte 64 to location 23 of the EEPROM
 236:	60 e0       	ldi	r22, 0x00	; 0
 238:	ce 01       	movw	r24, r28
 23a:	2d d1       	rcall	.+602    	; 0x496 <eeprom_write_byte>
		}
		if(F_MoterBi == 0)
 23c:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <F_MoterBi>
 240:	82 30       	cpi	r24, 0x02	; 2
 242:	60 f7       	brcc	.-40     	; 0x21c <main+0x16>

	
	// 외부 인터럽트 설정
	// INT0 (PD2) low level에서 인터럽트 발생
	//MCUCR &= ~((1 << ISC01) | (1 << ISC00)); // ISC01=0, ISC00=0 -> Low level
	MCUCR |= (1 << ISC01) | (1 << ISC00);    // ISC01=1, ISC00=1 -> 상승 엣지
 244:	85 b7       	in	r24, 0x35	; 53
 246:	83 60       	ori	r24, 0x03	; 3
 248:	85 bf       	out	0x35, r24	; 53
	// 인터럽트 활성화
	GICR |=  (1 << INT0);
 24a:	8b b7       	in	r24, 0x3b	; 59
 24c:	80 64       	ori	r24, 0x40	; 64
 24e:	8b bf       	out	0x3b, r24	; 59
	
	timer0_init();
 250:	d1 df       	rcall	.-94     	; 0x1f4 <timer0_init>
	
	//PORTB |=(1 << PB1);
	PORTB &= ~(1 << PB2);
 252:	c2 98       	cbi	0x18, 2	; 24
	PORTC |= (1 << PC3);
 254:	ab 9a       	sbi	0x15, 3	; 21

	time_delay = 1;
 256:	81 e0       	ldi	r24, 0x01	; 1
 258:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <time_delay>
					case 0x01:
					FSpeed =1;
					if(timer_overflow_count > 999)
					{
						timer_overflow_count = 0;
						PORTC ^= (1 << PC3);
 25c:	d8 e0       	ldi	r29, 0x08	; 8
			{
				T_AC_Cnt1 = 0;
				if(FSpeed==1)
				T_AC_Cnt = 7;
				else if(FSpeed==2)
				T_AC_Cnt = 6;
 25e:	0f 2e       	mov	r0, r31
 260:	f6 e0       	ldi	r31, 0x06	; 6
 262:	ff 2e       	mov	r15, r31
 264:	f0 2d       	mov	r31, r0
			
			if(T_AC_Cnt1 >= 1)
			{
				T_AC_Cnt1 = 0;
				if(FSpeed==1)
				T_AC_Cnt = 7;
 266:	17 e0       	ldi	r17, 0x07	; 7
				MoterEn = 1;
				InputSwitch_PD3();
				break;
				
				case 0x02:
				MoterEn = 1;
 268:	c1 e0       	ldi	r28, 0x01	; 1
						
					}
					
					break;
					case 0x02:
					FSpeed =2;
 26a:	02 e0       	ldi	r16, 0x02	; 2

	time_delay = 1;

	while (1)
	{
		if(time_delay == 0)
 26c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_delay>
 270:	81 11       	cpse	r24, r1
 272:	87 c0       	rjmp	.+270    	; 0x382 <main+0x17c>
		{
			if(MoterEn)
 274:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <MoterEn>
 278:	88 23       	and	r24, r24
 27a:	09 f4       	brne	.+2      	; 0x27e <main+0x78>
 27c:	45 c0       	rjmp	.+138    	; 0x308 <main+0x102>
			{
				switch(SpeedInput)
 27e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <SpeedInput>
 282:	81 30       	cpi	r24, 0x01	; 1
 284:	51 f0       	breq	.+20     	; 0x29a <main+0x94>
 286:	28 f0       	brcs	.+10     	; 0x292 <main+0x8c>
 288:	82 30       	cpi	r24, 0x02	; 2
 28a:	c1 f0       	breq	.+48     	; 0x2bc <main+0xb6>
 28c:	83 30       	cpi	r24, 0x03	; 3
 28e:	39 f1       	breq	.+78     	; 0x2de <main+0xd8>
 290:	37 c0       	rjmp	.+110    	; 0x300 <main+0xfa>
				{
					case 0x00:
					FSpeed = 0;
 292:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <FSpeed>
					PORTC |= (1 << PC3);
 296:	ab 9a       	sbi	0x15, 3	; 21
					break;
 298:	38 c0       	rjmp	.+112    	; 0x30a <main+0x104>
					case 0x01:
					FSpeed =1;
 29a:	c0 93 6d 00 	sts	0x006D, r28	; 0x80006d <FSpeed>
					if(timer_overflow_count > 999)
 29e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <timer_overflow_count>
 2a2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <timer_overflow_count+0x1>
 2a6:	88 3e       	cpi	r24, 0xE8	; 232
 2a8:	93 40       	sbci	r25, 0x03	; 3
 2aa:	78 f1       	brcs	.+94     	; 0x30a <main+0x104>
					{
						timer_overflow_count = 0;
 2ac:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <timer_overflow_count+0x1>
 2b0:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <timer_overflow_count>
						PORTC ^= (1 << PC3);
 2b4:	85 b3       	in	r24, 0x15	; 21
 2b6:	8d 27       	eor	r24, r29
 2b8:	85 bb       	out	0x15, r24	; 21
 2ba:	27 c0       	rjmp	.+78     	; 0x30a <main+0x104>
						
					}
					
					break;
					case 0x02:
					FSpeed =2;
 2bc:	00 93 6d 00 	sts	0x006D, r16	; 0x80006d <FSpeed>
					if(timer_overflow_count > 1999)
 2c0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <timer_overflow_count>
 2c4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <timer_overflow_count+0x1>
 2c8:	80 3d       	cpi	r24, 0xD0	; 208
 2ca:	97 40       	sbci	r25, 0x07	; 7
 2cc:	f0 f0       	brcs	.+60     	; 0x30a <main+0x104>
					{
						timer_overflow_count = 0;
 2ce:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <timer_overflow_count+0x1>
 2d2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <timer_overflow_count>
						PORTC ^= (1 << PC3);
 2d6:	85 b3       	in	r24, 0x15	; 21
 2d8:	8d 27       	eor	r24, r29
 2da:	85 bb       	out	0x15, r24	; 21
 2dc:	16 c0       	rjmp	.+44     	; 0x30a <main+0x104>
						
					}
					break;
					case 0x03:
					FSpeed =1;
 2de:	c0 93 6d 00 	sts	0x006D, r28	; 0x80006d <FSpeed>
					if(timer_overflow_count > 999)
 2e2:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <timer_overflow_count>
 2e6:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <timer_overflow_count+0x1>
 2ea:	88 3e       	cpi	r24, 0xE8	; 232
 2ec:	93 40       	sbci	r25, 0x03	; 3
 2ee:	68 f0       	brcs	.+26     	; 0x30a <main+0x104>
					{
						timer_overflow_count = 0;
 2f0:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <timer_overflow_count+0x1>
 2f4:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <timer_overflow_count>
						PORTC ^= (1 << PC3);
 2f8:	85 b3       	in	r24, 0x15	; 21
 2fa:	8d 27       	eor	r24, r29
 2fc:	85 bb       	out	0x15, r24	; 21
 2fe:	05 c0       	rjmp	.+10     	; 0x30a <main+0x104>
						
					}
					break;

					default:
					FSpeed = 0;
 300:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <FSpeed>
					PORTC |= (1 << PC3);
 304:	ab 9a       	sbi	0x15, 3	; 21
					break;
 306:	01 c0       	rjmp	.+2      	; 0x30a <main+0x104>
				}
			}
			else
			{
				PORTC |= (1 << PC3);
 308:	ab 9a       	sbi	0x15, 3	; 21
			}

			switch(read_input())
 30a:	a9 de       	rcall	.-686    	; 0x5e <read_input>
 30c:	82 30       	cpi	r24, 0x02	; 2
 30e:	41 f0       	breq	.+16     	; 0x320 <main+0x11a>
 310:	83 30       	cpi	r24, 0x03	; 3
 312:	51 f0       	breq	.+20     	; 0x328 <main+0x122>
 314:	81 30       	cpi	r24, 0x01	; 1
 316:	69 f4       	brne	.+26     	; 0x332 <main+0x12c>
			{
				

				case 0x01:    // in case one Sensor ..
				// F_MoterBi = 0;
				MoterEn = 1;
 318:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <MoterEn>
				InputSwitch_PD3();
 31c:	c6 de       	rcall	.-628    	; 0xaa <InputSwitch_PD3>
				break;
 31e:	0d c0       	rjmp	.+26     	; 0x33a <main+0x134>
				
				case 0x02:
				MoterEn = 1;
 320:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <MoterEn>
				InputSwitch_PD3_PD4();
 324:	fd de       	rcall	.-518    	; 0x120 <InputSwitch_PD3_PD4>
				
				break;
 326:	09 c0       	rjmp	.+18     	; 0x33a <main+0x134>
				case 0x03:
					F_MoterBi = 0;
 328:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <F_MoterBi>
					MoterEn = 1;
 32c:	c0 93 6a 00 	sts	0x006A, r28	; 0x80006a <MoterEn>
				break;
 330:	04 c0       	rjmp	.+8      	; 0x33a <main+0x134>

				default:
				FSpeed = 0;
 332:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <FSpeed>
				MoterEn = 0;
 336:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <MoterEn>
				break;
				
			}
			
			
			if(T_AC_Cnt1 >= 1)
 33a:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <T_AC_Cnt1>
 33e:	88 23       	and	r24, r24
 340:	91 f0       	breq	.+36     	; 0x366 <main+0x160>
			{
				T_AC_Cnt1 = 0;
 342:	10 92 82 00 	sts	0x0082, r1	; 0x800082 <T_AC_Cnt1>
				if(FSpeed==1)
 346:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <FSpeed>
 34a:	81 30       	cpi	r24, 0x01	; 1
 34c:	19 f4       	brne	.+6      	; 0x354 <main+0x14e>
				T_AC_Cnt = 7;
 34e:	10 93 83 00 	sts	0x0083, r17	; 0x800083 <T_AC_Cnt>
 352:	09 c0       	rjmp	.+18     	; 0x366 <main+0x160>
				else if(FSpeed==2)
 354:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <FSpeed>
 358:	82 30       	cpi	r24, 0x02	; 2
 35a:	19 f4       	brne	.+6      	; 0x362 <main+0x15c>
				T_AC_Cnt = 6;
 35c:	f0 92 83 00 	sts	0x0083, r15	; 0x800083 <T_AC_Cnt>
 360:	02 c0       	rjmp	.+4      	; 0x366 <main+0x160>
				else
				T_AC_Cnt= 0;
 362:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <T_AC_Cnt>
				//PORTC ^= (1 << PC3);
			}
			
			
		
			if(T_AC_Cnt)
 366:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <T_AC_Cnt>
 36a:	88 23       	and	r24, r24
 36c:	41 f0       	breq	.+16     	; 0x37e <main+0x178>
			{
				if(F_MoterBi==1)
 36e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <F_MoterBi>
 372:	81 30       	cpi	r24, 0x01	; 1
 374:	11 f4       	brne	.+4      	; 0x37a <main+0x174>
				PORTB |=(1 << PB1);
 376:	c1 9a       	sbi	0x18, 1	; 24
 378:	04 c0       	rjmp	.+8      	; 0x382 <main+0x17c>
				else
				PORTB |=(1 << PB2);
 37a:	c2 9a       	sbi	0x18, 2	; 24
 37c:	02 c0       	rjmp	.+4      	; 0x382 <main+0x17c>
				
			}else
			{
				PORTB &= ~(1 << PB1);
 37e:	c1 98       	cbi	0x18, 1	; 24
				PORTB &= ~(1 << PB2);
 380:	c2 98       	cbi	0x18, 2	; 24
			}
		}
		
				

		if(eeprom_en)
 382:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <eeprom_en>
 386:	88 23       	and	r24, r24
 388:	09 f4       	brne	.+2      	; 0x38c <main+0x186>
 38a:	70 cf       	rjmp	.-288    	; 0x26c <main+0x66>
		{
			
			{
				eeprom_write_byte( (uint8_t *)save_1, F_MoterBi); //  write the byte 64 to location 23 of the EEPROM
 38c:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <F_MoterBi>
 390:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 394:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 398:	7e d0       	rcall	.+252    	; 0x496 <eeprom_write_byte>
				eeprom_en = 0;
 39a:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <eeprom_en>
 39e:	66 cf       	rjmp	.-308    	; 0x26c <main+0x66>

000003a0 <__vector_9>:
uint8_t time_1ms = 0;
uint8_t time_10ms = 0;
uint8_t time_100ms = 0;

ISR(TIMER0_OVF_vect)
{
 3a0:	1f 92       	push	r1
 3a2:	0f 92       	push	r0
 3a4:	0f b6       	in	r0, 0x3f	; 63
 3a6:	0f 92       	push	r0
 3a8:	11 24       	eor	r1, r1
 3aa:	8f 93       	push	r24
 3ac:	9f 93       	push	r25
 3ae:	af 93       	push	r26
 3b0:	bf 93       	push	r27
	// 타이머0 초기값 설정 (195)
	TCNT0 = 239;
 3b2:	8f ee       	ldi	r24, 0xEF	; 239
 3b4:	82 bf       	out	0x32, r24	; 50
	if(T_AC_Cnt)
 3b6:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <T_AC_Cnt>
 3ba:	88 23       	and	r24, r24
 3bc:	29 f0       	breq	.+10     	; 0x3c8 <__vector_9+0x28>
	{
		T_AC_Cnt--;
 3be:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <T_AC_Cnt>
 3c2:	81 50       	subi	r24, 0x01	; 1
 3c4:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <T_AC_Cnt>
		
	}
	// 타이머 오버플로우 카운터 증가
	timer_millis++;
 3c8:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <timer_millis>
 3cc:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <timer_millis+0x1>
 3d0:	a0 91 80 00 	lds	r26, 0x0080	; 0x800080 <timer_millis+0x2>
 3d4:	b0 91 81 00 	lds	r27, 0x0081	; 0x800081 <timer_millis+0x3>
 3d8:	01 96       	adiw	r24, 0x01	; 1
 3da:	a1 1d       	adc	r26, r1
 3dc:	b1 1d       	adc	r27, r1
 3de:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <timer_millis>
 3e2:	90 93 7f 00 	sts	0x007F, r25	; 0x80007f <timer_millis+0x1>
 3e6:	a0 93 80 00 	sts	0x0080, r26	; 0x800080 <timer_millis+0x2>
 3ea:	b0 93 81 00 	sts	0x0081, r27	; 0x800081 <timer_millis+0x3>
	
	timer_overflow_count++;
 3ee:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <timer_overflow_count>
 3f2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <timer_overflow_count+0x1>
 3f6:	01 96       	adiw	r24, 0x01	; 1
 3f8:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <timer_overflow_count+0x1>
 3fc:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <timer_overflow_count>
	time_1ms++;
 400:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <time_1ms>
 404:	8f 5f       	subi	r24, 0xFF	; 255
	if(time_1ms > 10)
 406:	8b 30       	cpi	r24, 0x0B	; 11
 408:	18 f4       	brcc	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
	}
	// 타이머 오버플로우 카운터 증가
	timer_millis++;
	
	timer_overflow_count++;
	time_1ms++;
 40a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <time_1ms>
 40e:	07 c0       	rjmp	.+14     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
	if(time_1ms > 10)
	{
		time_1ms =0 ;
 410:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <time_1ms>
		time_10ms++;
 414:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <time_10ms>
 418:	8f 5f       	subi	r24, 0xFF	; 255
 41a:	80 93 65 00 	sts	0x0065, r24	; 0x800065 <time_10ms>
	}
	if(time_10ms > 10)
 41e:	80 91 65 00 	lds	r24, 0x0065	; 0x800065 <time_10ms>
 422:	8b 30       	cpi	r24, 0x0B	; 11
 424:	38 f0       	brcs	.+14     	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
	{
		time_10ms = 0;
 426:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <time_10ms>
		time_100ms++;
 42a:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 42e:	8f 5f       	subi	r24, 0xFF	; 255
 430:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>

	}
	if(time_100ms > 10)
 434:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 438:	8b 30       	cpi	r24, 0x0B	; 11
 43a:	58 f0       	brcs	.+22     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
	{
		time_100ms= 0;
 43c:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__data_end>
		if(time_delay)
 440:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_delay>
 444:	88 23       	and	r24, r24
 446:	29 f0       	breq	.+10     	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
			time_delay--;
 448:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_delay>
 44c:	81 50       	subi	r24, 0x01	; 1
 44e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <time_delay>
	}

	
}
 452:	bf 91       	pop	r27
 454:	af 91       	pop	r26
 456:	9f 91       	pop	r25
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <__vector_1>:


// INT0 (PD2) 인터럽트 서비스 루틴
ISR(INT0_vect)
{
 464:	1f 92       	push	r1
 466:	0f 92       	push	r0
 468:	0f b6       	in	r0, 0x3f	; 63
 46a:	0f 92       	push	r0
 46c:	11 24       	eor	r1, r1
 46e:	8f 93       	push	r24
	// PD4 핀에서 low level 인터럽트가 발생했을 때 실행될 코드
	// 예: PC3 핀 토글
	//PORTC ^= (1 << PC3);
	
	T_AC_Cnt1++;
 470:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <T_AC_Cnt1>
 474:	8f 5f       	subi	r24, 0xFF	; 255
 476:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <T_AC_Cnt1>

	
}
 47a:	8f 91       	pop	r24
 47c:	0f 90       	pop	r0
 47e:	0f be       	out	0x3f, r0	; 63
 480:	0f 90       	pop	r0
 482:	1f 90       	pop	r1
 484:	18 95       	reti

00000486 <eeprom_read_byte>:
 486:	e1 99       	sbic	0x1c, 1	; 28
 488:	fe cf       	rjmp	.-4      	; 0x486 <eeprom_read_byte>
 48a:	9f bb       	out	0x1f, r25	; 31
 48c:	8e bb       	out	0x1e, r24	; 30
 48e:	e0 9a       	sbi	0x1c, 0	; 28
 490:	99 27       	eor	r25, r25
 492:	8d b3       	in	r24, 0x1d	; 29
 494:	08 95       	ret

00000496 <eeprom_write_byte>:
 496:	26 2f       	mov	r18, r22

00000498 <eeprom_write_r18>:
 498:	e1 99       	sbic	0x1c, 1	; 28
 49a:	fe cf       	rjmp	.-4      	; 0x498 <eeprom_write_r18>
 49c:	9f bb       	out	0x1f, r25	; 31
 49e:	8e bb       	out	0x1e, r24	; 30
 4a0:	2d bb       	out	0x1d, r18	; 29
 4a2:	0f b6       	in	r0, 0x3f	; 63
 4a4:	f8 94       	cli
 4a6:	e2 9a       	sbi	0x1c, 2	; 28
 4a8:	e1 9a       	sbi	0x1c, 1	; 28
 4aa:	0f be       	out	0x3f, r0	; 63
 4ac:	01 96       	adiw	r24, 0x01	; 1
 4ae:	08 95       	ret

000004b0 <_exit>:
 4b0:	f8 94       	cli

000004b2 <__stop_program>:
 4b2:	ff cf       	rjmp	.-2      	; 0x4b2 <__stop_program>
