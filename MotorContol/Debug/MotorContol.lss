
MotorContol.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000492  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  00000492  00000526  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  00800066  00800066  0000052c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000055c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000098  00000000  00000000  00000598  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000975  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000611  00000000  00000000  00000fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000771  00000000  00000000  000015b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000c4  00000000  00000000  00001d28  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000440  00000000  00000000  00001dec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000fe  00000000  00000000  0000222c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000232a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	07 c2       	rjmp	.+1038   	; 0x412 <__vector_1>
   4:	2b c0       	rjmp	.+86     	; 0x5c <__bad_interrupt>
   6:	2a c0       	rjmp	.+84     	; 0x5c <__bad_interrupt>
   8:	29 c0       	rjmp	.+82     	; 0x5c <__bad_interrupt>
   a:	28 c0       	rjmp	.+80     	; 0x5c <__bad_interrupt>
   c:	27 c0       	rjmp	.+78     	; 0x5c <__bad_interrupt>
   e:	26 c0       	rjmp	.+76     	; 0x5c <__bad_interrupt>
  10:	25 c0       	rjmp	.+74     	; 0x5c <__bad_interrupt>
  12:	90 c1       	rjmp	.+800    	; 0x334 <__vector_9>
  14:	23 c0       	rjmp	.+70     	; 0x5c <__bad_interrupt>
  16:	22 c0       	rjmp	.+68     	; 0x5c <__bad_interrupt>
  18:	21 c0       	rjmp	.+66     	; 0x5c <__bad_interrupt>
  1a:	20 c0       	rjmp	.+64     	; 0x5c <__bad_interrupt>
  1c:	1f c0       	rjmp	.+62     	; 0x5c <__bad_interrupt>
  1e:	1e c0       	rjmp	.+60     	; 0x5c <__bad_interrupt>
  20:	1d c0       	rjmp	.+58     	; 0x5c <__bad_interrupt>
  22:	1c c0       	rjmp	.+56     	; 0x5c <__bad_interrupt>
  24:	1b c0       	rjmp	.+54     	; 0x5c <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_copy_data>:
  32:	10 e0       	ldi	r17, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	e2 e9       	ldi	r30, 0x92	; 146
  3a:	f4 e0       	ldi	r31, 0x04	; 4
  3c:	02 c0       	rjmp	.+4      	; 0x42 <__SREG__+0x3>
  3e:	05 90       	lpm	r0, Z+
  40:	0d 92       	st	X+, r0
  42:	a6 36       	cpi	r26, 0x66	; 102
  44:	b1 07       	cpc	r27, r17
  46:	d9 f7       	brne	.-10     	; 0x3e <__SP_H__>

00000048 <__do_clear_bss>:
  48:	20 e0       	ldi	r18, 0x00	; 0
  4a:	a6 e6       	ldi	r26, 0x66	; 102
  4c:	b0 e0       	ldi	r27, 0x00	; 0
  4e:	01 c0       	rjmp	.+2      	; 0x52 <.do_clear_bss_start>

00000050 <.do_clear_bss_loop>:
  50:	1d 92       	st	X+, r1

00000052 <.do_clear_bss_start>:
  52:	a7 38       	cpi	r26, 0x87	; 135
  54:	b2 07       	cpc	r27, r18
  56:	e1 f7       	brne	.-8      	; 0x50 <.do_clear_bss_loop>
  58:	d5 d0       	rcall	.+426    	; 0x204 <main>
  5a:	19 c2       	rjmp	.+1074   	; 0x48e <_exit>

0000005c <__bad_interrupt>:
  5c:	d1 cf       	rjmp	.-94     	; 0x0 <__vectors>

0000005e <read_input>:
	cli(); // 인터럽트 비활성화 (원자적 접근을 위해)
	millis_copy = timer_millis;
	sei(); // 인터럽트 활성화
	
	return millis_copy;
}
  5e:	85 9b       	sbis	0x10, 5	; 16
  60:	02 c0       	rjmp	.+4      	; 0x66 <read_input+0x8>
  62:	80 e0       	ldi	r24, 0x00	; 0
  64:	01 c0       	rjmp	.+2      	; 0x68 <read_input+0xa>
  66:	82 e0       	ldi	r24, 0x02	; 2
  68:	86 99       	sbic	0x10, 6	; 16
  6a:	02 c0       	rjmp	.+4      	; 0x70 <read_input+0x12>
  6c:	81 60       	ori	r24, 0x01	; 1
  6e:	01 c0       	rjmp	.+2      	; 0x72 <read_input+0x14>
  70:	8e 7f       	andi	r24, 0xFE	; 254
  72:	87 99       	sbic	0x10, 7	; 16
  74:	06 c0       	rjmp	.+12     	; 0x82 <read_input+0x24>
  76:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <SpeedInput>
  7a:	92 60       	ori	r25, 0x02	; 2
  7c:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <SpeedInput>
  80:	05 c0       	rjmp	.+10     	; 0x8c <read_input+0x2e>
  82:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <SpeedInput>
  86:	9d 7f       	andi	r25, 0xFD	; 253
  88:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <SpeedInput>
  8c:	b0 99       	sbic	0x16, 0	; 22
  8e:	06 c0       	rjmp	.+12     	; 0x9c <read_input+0x3e>
  90:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <SpeedInput>
  94:	91 60       	ori	r25, 0x01	; 1
  96:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <SpeedInput>
  9a:	05 c0       	rjmp	.+10     	; 0xa6 <read_input+0x48>
  9c:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <SpeedInput>
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <SpeedInput>
  a6:	83 70       	andi	r24, 0x03	; 3
  a8:	08 95       	ret

000000aa <InputSwitch_PD3>:
  aa:	80 b3       	in	r24, 0x10	; 16
  ac:	91 e0       	ldi	r25, 0x01	; 1
  ae:	28 2f       	mov	r18, r24
  b0:	28 70       	andi	r18, 0x08	; 8
  b2:	83 fd       	sbrc	r24, 3
  b4:	90 e0       	ldi	r25, 0x00	; 0
  b6:	90 93 7a 00 	sts	0x007A, r25	; 0x80007a <switchBuffer>
  ba:	22 23       	and	r18, r18
  bc:	c1 f0       	breq	.+48     	; 0xee <InputSwitch_PD3+0x44>
  be:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <switchBuffer+0x1>
  c2:	81 11       	cpse	r24, r1
  c4:	14 c0       	rjmp	.+40     	; 0xee <InputSwitch_PD3+0x44>
  c6:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <switchBuffer+0x2>
  ca:	81 11       	cpse	r24, r1
  cc:	10 c0       	rjmp	.+32     	; 0xee <InputSwitch_PD3+0x44>
  ce:	80 91 7d 00 	lds	r24, 0x007D	; 0x80007d <switchBuffer+0x3>
  d2:	81 11       	cpse	r24, r1
  d4:	0c c0       	rjmp	.+24     	; 0xee <InputSwitch_PD3+0x44>
  d6:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <switchBuffer+0x4>
  da:	81 11       	cpse	r24, r1
  dc:	08 c0       	rjmp	.+16     	; 0xee <InputSwitch_PD3+0x44>
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <F_Switch_PD3>
  e4:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PrePD3>
  e8:	81 30       	cpi	r24, 0x01	; 1
  ea:	41 f4       	brne	.+16     	; 0xfc <InputSwitch_PD3+0x52>
  ec:	08 95       	ret
  ee:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <F_Switch_PD3>
  f2:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <PrePD3>
  f6:	88 23       	and	r24, r24
  f8:	c1 f0       	breq	.+48     	; 0x12a <InputSwitch_PD3+0x80>
  fa:	14 c0       	rjmp	.+40     	; 0x124 <InputSwitch_PD3+0x7a>
  fc:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <F_MoterBi>
 100:	88 23       	and	r24, r24
 102:	41 f0       	breq	.+16     	; 0x114 <InputSwitch_PD3+0x6a>
 104:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <F_MoterBi>
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <eeprom_en>
 10e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <time_delay>
 112:	09 c0       	rjmp	.+18     	; 0x126 <InputSwitch_PD3+0x7c>
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <F_MoterBi>
 11a:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <eeprom_en>
 11e:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <time_delay>
 122:	01 c0       	rjmp	.+2      	; 0x126 <InputSwitch_PD3+0x7c>
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <PrePD3>
 12a:	08 95       	ret

0000012c <InputSwitch_PD3_PD4>:
 12c:	80 b3       	in	r24, 0x10	; 16
 12e:	91 e0       	ldi	r25, 0x01	; 1
 130:	38 2f       	mov	r19, r24
 132:	38 70       	andi	r19, 0x08	; 8
 134:	83 fd       	sbrc	r24, 3
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	90 93 70 00 	sts	0x0070, r25	; 0x800070 <switchBuf>
 13c:	80 b3       	in	r24, 0x10	; 16
 13e:	91 e0       	ldi	r25, 0x01	; 1
 140:	28 2f       	mov	r18, r24
 142:	20 71       	andi	r18, 0x10	; 16
 144:	84 fd       	sbrc	r24, 4
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	90 93 75 00 	sts	0x0075, r25	; 0x800075 <switchBuf+0x5>
 14c:	33 23       	and	r19, r19
 14e:	a1 f0       	breq	.+40     	; 0x178 <InputSwitch_PD3_PD4+0x4c>
 150:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <switchBuf+0x1>
 154:	81 11       	cpse	r24, r1
 156:	10 c0       	rjmp	.+32     	; 0x178 <InputSwitch_PD3_PD4+0x4c>
 158:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <switchBuf+0x2>
 15c:	81 11       	cpse	r24, r1
 15e:	0c c0       	rjmp	.+24     	; 0x178 <InputSwitch_PD3_PD4+0x4c>
 160:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <switchBuf+0x3>
 164:	81 11       	cpse	r24, r1
 166:	08 c0       	rjmp	.+16     	; 0x178 <InputSwitch_PD3_PD4+0x4c>
 168:	80 91 74 00 	lds	r24, 0x0074	; 0x800074 <switchBuf+0x4>
 16c:	81 11       	cpse	r24, r1
 16e:	04 c0       	rjmp	.+8      	; 0x178 <InputSwitch_PD3_PD4+0x4c>
 170:	81 e0       	ldi	r24, 0x01	; 1
 172:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <F_Switch_PD3>
 176:	02 c0       	rjmp	.+4      	; 0x17c <InputSwitch_PD3_PD4+0x50>
 178:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <F_Switch_PD3>
 17c:	22 23       	and	r18, r18
 17e:	a1 f0       	breq	.+40     	; 0x1a8 <InputSwitch_PD3_PD4+0x7c>
 180:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <switchBuf+0x6>
 184:	81 11       	cpse	r24, r1
 186:	10 c0       	rjmp	.+32     	; 0x1a8 <InputSwitch_PD3_PD4+0x7c>
 188:	80 91 77 00 	lds	r24, 0x0077	; 0x800077 <switchBuf+0x7>
 18c:	81 11       	cpse	r24, r1
 18e:	0c c0       	rjmp	.+24     	; 0x1a8 <InputSwitch_PD3_PD4+0x7c>
 190:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <switchBuf+0x8>
 194:	81 11       	cpse	r24, r1
 196:	08 c0       	rjmp	.+16     	; 0x1a8 <InputSwitch_PD3_PD4+0x7c>
 198:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <switchBuf+0x9>
 19c:	81 11       	cpse	r24, r1
 19e:	04 c0       	rjmp	.+8      	; 0x1a8 <InputSwitch_PD3_PD4+0x7c>
 1a0:	81 e0       	ldi	r24, 0x01	; 1
 1a2:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <F_Switch_PD4>
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <InputSwitch_PD3_PD4+0x80>
 1a8:	10 92 69 00 	sts	0x0069, r1	; 0x800069 <F_Switch_PD4>
 1ac:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <F_Switch_PD3>
 1b0:	90 91 64 00 	lds	r25, 0x0064	; 0x800064 <PrePD3>
 1b4:	89 17       	cp	r24, r25
 1b6:	59 f0       	breq	.+22     	; 0x1ce <InputSwitch_PD3_PD4+0xa2>
 1b8:	88 23       	and	r24, r24
 1ba:	39 f0       	breq	.+14     	; 0x1ca <InputSwitch_PD3_PD4+0x9e>
 1bc:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <F_MoterBi>
 1c0:	91 e0       	ldi	r25, 0x01	; 1
 1c2:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <eeprom_en>
 1c6:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <time_delay>
 1ca:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <PrePD3>
 1ce:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <F_Switch_PD4>
 1d2:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <PrePD4>
 1d6:	89 17       	cp	r24, r25
 1d8:	59 f0       	breq	.+22     	; 0x1f0 <InputSwitch_PD3_PD4+0xc4>
 1da:	88 23       	and	r24, r24
 1dc:	39 f0       	breq	.+14     	; 0x1ec <InputSwitch_PD3_PD4+0xc0>
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	90 93 62 00 	sts	0x0062, r25	; 0x800062 <F_MoterBi>
 1e4:	90 93 6b 00 	sts	0x006B, r25	; 0x80006b <eeprom_en>
 1e8:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <time_delay>
 1ec:	80 93 63 00 	sts	0x0063, r24	; 0x800063 <PrePD4>
 1f0:	08 95       	ret

000001f2 <timer0_init>:

// 타이머0 초기화 함수
void timer0_init(void)
{
	// 타이머0 클럭을 설정 (분주율 64)
	TCCR0 = (1 << CS01) | (1 << CS00);
 1f2:	83 e0       	ldi	r24, 0x03	; 3
 1f4:	83 bf       	out	0x33, r24	; 51

	// 타이머0 오버플로우 인터럽트 활성화
	TIMSK |= (1 << TOIE0);
 1f6:	89 b7       	in	r24, 0x39	; 57
 1f8:	81 60       	ori	r24, 0x01	; 1
 1fa:	89 bf       	out	0x39, r24	; 57

	// 전역 인터럽트 활성화
	sei();
 1fc:	78 94       	sei

	// 타이머0 초기값 설정 (195)
	TCNT0 = 238;//239;
 1fe:	8e ee       	ldi	r24, 0xEE	; 238
 200:	82 bf       	out	0x32, r24	; 50
 202:	08 95       	ret

00000204 <main>:

int main (void)
{
	/* Insert system clock initialization code here (sysclk_init()). */

	DDRB &= ~(1 <<PB0);
 204:	b8 98       	cbi	0x17, 0	; 23
	DDRC &= ~(1 <<PD2);
 206:	a2 98       	cbi	0x14, 2	; 20
	DDRD &= ~((1 << PD3) | (1 << PD4));
 208:	81 b3       	in	r24, 0x11	; 17
 20a:	87 7e       	andi	r24, 0xE7	; 231
 20c:	81 bb       	out	0x11, r24	; 17
	DDRD &= ~((1 <<PD5)|(1 <<PD6) |(1 <<PD7));
 20e:	81 b3       	in	r24, 0x11	; 17
 210:	8f 71       	andi	r24, 0x1F	; 31
 212:	81 bb       	out	0x11, r24	; 17
	DDRC |= (1 << PC3);
 214:	a3 9a       	sbi	0x14, 3	; 20
	DDRC |= (1 << PB1);
 216:	a1 9a       	sbi	0x14, 1	; 20
	DDRC |= (1 << PB2);
 218:	a2 9a       	sbi	0x14, 2	; 20
	
	
	while(1)
	{
		F_MoterBi = eeprom_read_byte((uint8_t*)save_1); // read the byte in location 23
 21a:	c0 91 60 00 	lds	r28, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 21e:	d0 91 61 00 	lds	r29, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 222:	ce 01       	movw	r24, r28
 224:	1f d1       	rcall	.+574    	; 0x464 <eeprom_read_byte>
		
		F_MoterBi = F_MoterBi & 0x03;
 226:	83 70       	andi	r24, 0x03	; 3
 228:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <F_MoterBi>
		if(F_MoterBi == 0xFF)
		{
			F_MoterBi= 0;
			eeprom_write_byte( (uint8_t *)save_1, F_MoterBi); //  write the byte 64 to location 23 of the EEPROM
		}
		if(F_MoterBi == 0)
 22c:	82 30       	cpi	r24, 0x02	; 2
 22e:	c8 f7       	brcc	.-14     	; 0x222 <main+0x1e>

	
	// 외부 인터럽트 설정
	// INT0 (PD2) low level에서 인터럽트 발생
	//MCUCR &= ~((1 << ISC01) | (1 << ISC00)); // ISC01=0, ISC00=0 -> Low level
	MCUCR |= (1 << ISC01) | (1 << ISC00);    // ISC01=1, ISC00=1 -> 상승 엣지
 230:	85 b7       	in	r24, 0x35	; 53
 232:	83 60       	ori	r24, 0x03	; 3
 234:	85 bf       	out	0x35, r24	; 53
	// 인터럽트 활성화
	GICR |=  (1 << INT0);
 236:	8b b7       	in	r24, 0x3b	; 59
 238:	80 64       	ori	r24, 0x40	; 64
 23a:	8b bf       	out	0x3b, r24	; 59
	
	timer0_init();
 23c:	da df       	rcall	.-76     	; 0x1f2 <timer0_init>
	
	//PORTB |=(1 << PB1);
	PORTB &= ~(1 << PB2);
 23e:	c2 98       	cbi	0x18, 2	; 24
	PORTC |= (1 << PC3);
 240:	ab 9a       	sbi	0x15, 3	; 21

	time_delay = 1;
 242:	81 e0       	ldi	r24, 0x01	; 1
 244:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <time_delay>
					case 0x01:
					FSpeed =1;
					if(timer_overflow_count > 999)
					{
						timer_overflow_count = 0;
						PORTC ^= (1 << PC3);
 248:	d8 e0       	ldi	r29, 0x08	; 8
				MoterEn = 1;
				InputSwitch_PD3();
				break;
				
				case 0x02:
				MoterEn = 1;
 24a:	c1 e0       	ldi	r28, 0x01	; 1
						
					}
					
					break;
					case 0x02:
					FSpeed =2;
 24c:	12 e0       	ldi	r17, 0x02	; 2

	time_delay = 1;

	while (1)
	{
		if(time_delay == 0)
 24e:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <time_delay>
 252:	81 11       	cpse	r24, r1
 254:	5e c0       	rjmp	.+188    	; 0x312 <main+0x10e>
		{
			if(MoterEn)
 256:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <MoterEn>
 25a:	88 23       	and	r24, r24
 25c:	09 f4       	brne	.+2      	; 0x260 <main+0x5c>
 25e:	45 c0       	rjmp	.+138    	; 0x2ea <main+0xe6>
			{
				switch(SpeedInput)
 260:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <SpeedInput>
 264:	81 30       	cpi	r24, 0x01	; 1
 266:	51 f0       	breq	.+20     	; 0x27c <main+0x78>
 268:	28 f0       	brcs	.+10     	; 0x274 <main+0x70>
 26a:	82 30       	cpi	r24, 0x02	; 2
 26c:	c1 f0       	breq	.+48     	; 0x29e <main+0x9a>
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	39 f1       	breq	.+78     	; 0x2c0 <main+0xbc>
 272:	37 c0       	rjmp	.+110    	; 0x2e2 <main+0xde>
				{
					case 0x00:
					FSpeed = 0;
 274:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <FSpeed>
					PORTC |= (1 << PC3);
 278:	ab 9a       	sbi	0x15, 3	; 21
					break;
 27a:	38 c0       	rjmp	.+112    	; 0x2ec <main+0xe8>
					case 0x01:
					FSpeed =1;
 27c:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <FSpeed>
					if(timer_overflow_count > 999)
 280:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <timer_overflow_count>
 284:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <timer_overflow_count+0x1>
 288:	88 3e       	cpi	r24, 0xE8	; 232
 28a:	93 40       	sbci	r25, 0x03	; 3
 28c:	78 f1       	brcs	.+94     	; 0x2ec <main+0xe8>
					{
						timer_overflow_count = 0;
 28e:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <timer_overflow_count+0x1>
 292:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <timer_overflow_count>
						PORTC ^= (1 << PC3);
 296:	85 b3       	in	r24, 0x15	; 21
 298:	8d 27       	eor	r24, r29
 29a:	85 bb       	out	0x15, r24	; 21
 29c:	27 c0       	rjmp	.+78     	; 0x2ec <main+0xe8>
						
					}
					
					break;
					case 0x02:
					FSpeed =2;
 29e:	10 93 6f 00 	sts	0x006F, r17	; 0x80006f <FSpeed>
					if(timer_overflow_count > 1999)
 2a2:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <timer_overflow_count>
 2a6:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <timer_overflow_count+0x1>
 2aa:	80 3d       	cpi	r24, 0xD0	; 208
 2ac:	97 40       	sbci	r25, 0x07	; 7
 2ae:	f0 f0       	brcs	.+60     	; 0x2ec <main+0xe8>
					{
						timer_overflow_count = 0;
 2b0:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <timer_overflow_count+0x1>
 2b4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <timer_overflow_count>
						PORTC ^= (1 << PC3);
 2b8:	85 b3       	in	r24, 0x15	; 21
 2ba:	8d 27       	eor	r24, r29
 2bc:	85 bb       	out	0x15, r24	; 21
 2be:	16 c0       	rjmp	.+44     	; 0x2ec <main+0xe8>
						
					}
					break;
					case 0x03:
					FSpeed =1;
 2c0:	c0 93 6f 00 	sts	0x006F, r28	; 0x80006f <FSpeed>
					if(timer_overflow_count > 999)
 2c4:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <timer_overflow_count>
 2c8:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <timer_overflow_count+0x1>
 2cc:	88 3e       	cpi	r24, 0xE8	; 232
 2ce:	93 40       	sbci	r25, 0x03	; 3
 2d0:	68 f0       	brcs	.+26     	; 0x2ec <main+0xe8>
					{
						timer_overflow_count = 0;
 2d2:	10 92 86 00 	sts	0x0086, r1	; 0x800086 <timer_overflow_count+0x1>
 2d6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <timer_overflow_count>
						PORTC ^= (1 << PC3);
 2da:	85 b3       	in	r24, 0x15	; 21
 2dc:	8d 27       	eor	r24, r29
 2de:	85 bb       	out	0x15, r24	; 21
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <main+0xe8>
						
					}
					break;

					default:
					FSpeed = 0;
 2e2:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <FSpeed>
					PORTC |= (1 << PC3);
 2e6:	ab 9a       	sbi	0x15, 3	; 21
					break;
 2e8:	01 c0       	rjmp	.+2      	; 0x2ec <main+0xe8>
				}
			}
			else
			{
				PORTC |= (1 << PC3);
 2ea:	ab 9a       	sbi	0x15, 3	; 21
			}

			switch(read_input())
 2ec:	b8 de       	rcall	.-656    	; 0x5e <read_input>
 2ee:	82 30       	cpi	r24, 0x02	; 2
 2f0:	41 f0       	breq	.+16     	; 0x302 <main+0xfe>
 2f2:	83 30       	cpi	r24, 0x03	; 3
 2f4:	71 f0       	breq	.+28     	; 0x312 <main+0x10e>
 2f6:	81 30       	cpi	r24, 0x01	; 1
 2f8:	41 f4       	brne	.+16     	; 0x30a <main+0x106>
			{
				

				case 0x01:    // in case one Sensor ..
				// F_MoterBi = 0;
				MoterEn = 1;
 2fa:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <MoterEn>
				InputSwitch_PD3();
 2fe:	d5 de       	rcall	.-598    	; 0xaa <InputSwitch_PD3>
				break;
 300:	08 c0       	rjmp	.+16     	; 0x312 <main+0x10e>
				
				case 0x02:
				MoterEn = 1;
 302:	c0 93 6c 00 	sts	0x006C, r28	; 0x80006c <MoterEn>
				InputSwitch_PD3_PD4();
 306:	12 df       	rcall	.-476    	; 0x12c <InputSwitch_PD3_PD4>
				
				break;
 308:	04 c0       	rjmp	.+8      	; 0x312 <main+0x10e>
				//F_MoterBi = 0;
				//MoterEn = 1;
				break;

				default:
				FSpeed = 0;
 30a:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <FSpeed>
				MoterEn = 0;
 30e:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <MoterEn>
				break;
				
			}
		}

		if(eeprom_en)
 312:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <eeprom_en>
 316:	88 23       	and	r24, r24
 318:	09 f4       	brne	.+2      	; 0x31c <main+0x118>
 31a:	99 cf       	rjmp	.-206    	; 0x24e <main+0x4a>
		{
			cli(); 
 31c:	f8 94       	cli
			eeprom_write_byte( (uint8_t *)save_1, F_MoterBi); //  write the byte 64 to location 23 of the EEPROM
 31e:	60 91 62 00 	lds	r22, 0x0062	; 0x800062 <F_MoterBi>
 322:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 326:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 32a:	a4 d0       	rcall	.+328    	; 0x474 <eeprom_write_byte>
			eeprom_en = 0;
 32c:	10 92 6b 00 	sts	0x006B, r1	; 0x80006b <eeprom_en>
			sei();
 330:	78 94       	sei
 332:	8d cf       	rjmp	.-230    	; 0x24e <main+0x4a>

00000334 <__vector_9>:
uint8_t time_1ms = 0;
uint8_t time_10ms = 0;
uint8_t time_100ms = 0;

ISR(TIMER0_OVF_vect)
{
 334:	1f 92       	push	r1
 336:	0f 92       	push	r0
 338:	0f b6       	in	r0, 0x3f	; 63
 33a:	0f 92       	push	r0
 33c:	11 24       	eor	r1, r1
 33e:	8f 93       	push	r24
 340:	9f 93       	push	r25
 342:	af 93       	push	r26
 344:	bf 93       	push	r27
	// 타이머0 초기값 설정 (195)
	TCNT0 = 238;
 346:	8e ee       	ldi	r24, 0xEE	; 238
 348:	82 bf       	out	0x32, r24	; 50
	if(T_AC_Cnt)
 34a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <T_AC_Cnt>
 34e:	88 23       	and	r24, r24
 350:	91 f0       	breq	.+36     	; 0x376 <__vector_9+0x42>
	{
		T_AC_Cnt--;
 352:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <T_AC_Cnt>
 356:	81 50       	subi	r24, 0x01	; 1
 358:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <T_AC_Cnt>
		if(F_MoterBi==1)
 35c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <F_MoterBi>
 360:	81 30       	cpi	r24, 0x01	; 1
 362:	11 f4       	brne	.+4      	; 0x368 <__vector_9+0x34>
		PORTB |=(1 << PB1);
 364:	c1 9a       	sbi	0x18, 1	; 24
 366:	01 c0       	rjmp	.+2      	; 0x36a <__vector_9+0x36>
		else
		PORTB |=(1 << PB2);
 368:	c2 9a       	sbi	0x18, 2	; 24
		
		if(T_AC_Cnt ==0)
 36a:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <T_AC_Cnt>
 36e:	81 11       	cpse	r24, r1
 370:	02 c0       	rjmp	.+4      	; 0x376 <__vector_9+0x42>
		{
			PORTB &= ~(1 << PB1);
 372:	c1 98       	cbi	0x18, 1	; 24
			PORTB &= ~(1 << PB2);
 374:	c2 98       	cbi	0x18, 2	; 24
		}
	}
	// 타이머 오버플로우 카운터 증가
	timer_millis++;
 376:	80 91 7f 00 	lds	r24, 0x007F	; 0x80007f <timer_millis>
 37a:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <timer_millis+0x1>
 37e:	a0 91 81 00 	lds	r26, 0x0081	; 0x800081 <timer_millis+0x2>
 382:	b0 91 82 00 	lds	r27, 0x0082	; 0x800082 <timer_millis+0x3>
 386:	01 96       	adiw	r24, 0x01	; 1
 388:	a1 1d       	adc	r26, r1
 38a:	b1 1d       	adc	r27, r1
 38c:	80 93 7f 00 	sts	0x007F, r24	; 0x80007f <timer_millis>
 390:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <timer_millis+0x1>
 394:	a0 93 81 00 	sts	0x0081, r26	; 0x800081 <timer_millis+0x2>
 398:	b0 93 82 00 	sts	0x0082, r27	; 0x800082 <timer_millis+0x3>
	
	timer_overflow_count++;
 39c:	80 91 85 00 	lds	r24, 0x0085	; 0x800085 <timer_overflow_count>
 3a0:	90 91 86 00 	lds	r25, 0x0086	; 0x800086 <timer_overflow_count+0x1>
 3a4:	01 96       	adiw	r24, 0x01	; 1
 3a6:	90 93 86 00 	sts	0x0086, r25	; 0x800086 <timer_overflow_count+0x1>
 3aa:	80 93 85 00 	sts	0x0085, r24	; 0x800085 <timer_overflow_count>
	time_1ms++;
 3ae:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <time_1ms>
 3b2:	8f 5f       	subi	r24, 0xFF	; 255
	if(time_1ms > 10)
 3b4:	8b 30       	cpi	r24, 0x0B	; 11
 3b6:	18 f4       	brcc	.+6      	; 0x3be <__vector_9+0x8a>
	}
	// 타이머 오버플로우 카운터 증가
	timer_millis++;
	
	timer_overflow_count++;
	time_1ms++;
 3b8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <time_1ms>
 3bc:	07 c0       	rjmp	.+14     	; 0x3cc <__vector_9+0x98>
	if(time_1ms > 10)
	{
		time_1ms =0 ;
 3be:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <time_1ms>
		time_10ms++;
 3c2:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <time_10ms>
 3c6:	8f 5f       	subi	r24, 0xFF	; 255
 3c8:	80 93 67 00 	sts	0x0067, r24	; 0x800067 <time_10ms>
	}
	if(time_10ms > 10)
 3cc:	80 91 67 00 	lds	r24, 0x0067	; 0x800067 <time_10ms>
 3d0:	8b 30       	cpi	r24, 0x0B	; 11
 3d2:	38 f0       	brcs	.+14     	; 0x3e2 <__vector_9+0xae>
	{
		time_10ms = 0;
 3d4:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <time_10ms>
		time_100ms++;
 3d8:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 3dc:	8f 5f       	subi	r24, 0xFF	; 255
 3de:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__data_end>

	}
	if(time_100ms > 10)
 3e2:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__data_end>
 3e6:	8b 30       	cpi	r24, 0x0B	; 11
 3e8:	58 f0       	brcs	.+22     	; 0x400 <__LOCK_REGION_LENGTH__>
	{
		time_100ms= 0;
 3ea:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__data_end>
		if(time_delay)
 3ee:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <time_delay>
 3f2:	88 23       	and	r24, r24
 3f4:	29 f0       	breq	.+10     	; 0x400 <__LOCK_REGION_LENGTH__>
			time_delay--;
 3f6:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <time_delay>
 3fa:	81 50       	subi	r24, 0x01	; 1
 3fc:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <time_delay>
	}

	
}
 400:	bf 91       	pop	r27
 402:	af 91       	pop	r26
 404:	9f 91       	pop	r25
 406:	8f 91       	pop	r24
 408:	0f 90       	pop	r0
 40a:	0f be       	out	0x3f, r0	; 63
 40c:	0f 90       	pop	r0
 40e:	1f 90       	pop	r1
 410:	18 95       	reti

00000412 <__vector_1>:


// INT0 (PD2) 인터럽트 서비스 루틴
ISR(INT0_vect)
{
 412:	1f 92       	push	r1
 414:	0f 92       	push	r0
 416:	0f b6       	in	r0, 0x3f	; 63
 418:	0f 92       	push	r0
 41a:	11 24       	eor	r1, r1
 41c:	8f 93       	push	r24
	// PD4 핀에서 low level 인터럽트가 발생했을 때 실행될 코드
	// 예: PC3 핀 토글
	//PORTC ^= (1 << PC3);
	
	T_AC_Cnt1++;
 41e:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <T_AC_Cnt1>
 422:	8f 5f       	subi	r24, 0xFF	; 255
 424:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <T_AC_Cnt1>
	if(T_AC_Cnt1 > 2)
 428:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <T_AC_Cnt1>
 42c:	83 30       	cpi	r24, 0x03	; 3
 42e:	a0 f0       	brcs	.+40     	; 0x458 <__vector_1+0x46>
	{
		T_AC_Cnt1 = 0;
 430:	10 92 83 00 	sts	0x0083, r1	; 0x800083 <T_AC_Cnt1>
		if(FSpeed==1)
 434:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <FSpeed>
 438:	81 30       	cpi	r24, 0x01	; 1
 43a:	21 f4       	brne	.+8      	; 0x444 <__vector_1+0x32>
		T_AC_Cnt = 7;
 43c:	87 e0       	ldi	r24, 0x07	; 7
 43e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <T_AC_Cnt>
 442:	0a c0       	rjmp	.+20     	; 0x458 <__vector_1+0x46>
		else if(FSpeed==2)
 444:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <FSpeed>
 448:	82 30       	cpi	r24, 0x02	; 2
 44a:	21 f4       	brne	.+8      	; 0x454 <__vector_1+0x42>
		T_AC_Cnt = 8;
 44c:	88 e0       	ldi	r24, 0x08	; 8
 44e:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <T_AC_Cnt>
 452:	02 c0       	rjmp	.+4      	; 0x458 <__vector_1+0x46>
		else
		T_AC_Cnt= 0;
 454:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <T_AC_Cnt>
		//PORTC ^= (1 << PC3);
	}
	
}
 458:	8f 91       	pop	r24
 45a:	0f 90       	pop	r0
 45c:	0f be       	out	0x3f, r0	; 63
 45e:	0f 90       	pop	r0
 460:	1f 90       	pop	r1
 462:	18 95       	reti

00000464 <eeprom_read_byte>:
 464:	e1 99       	sbic	0x1c, 1	; 28
 466:	fe cf       	rjmp	.-4      	; 0x464 <eeprom_read_byte>
 468:	9f bb       	out	0x1f, r25	; 31
 46a:	8e bb       	out	0x1e, r24	; 30
 46c:	e0 9a       	sbi	0x1c, 0	; 28
 46e:	99 27       	eor	r25, r25
 470:	8d b3       	in	r24, 0x1d	; 29
 472:	08 95       	ret

00000474 <eeprom_write_byte>:
 474:	26 2f       	mov	r18, r22

00000476 <eeprom_write_r18>:
 476:	e1 99       	sbic	0x1c, 1	; 28
 478:	fe cf       	rjmp	.-4      	; 0x476 <eeprom_write_r18>
 47a:	9f bb       	out	0x1f, r25	; 31
 47c:	8e bb       	out	0x1e, r24	; 30
 47e:	2d bb       	out	0x1d, r18	; 29
 480:	0f b6       	in	r0, 0x3f	; 63
 482:	f8 94       	cli
 484:	e2 9a       	sbi	0x1c, 2	; 28
 486:	e1 9a       	sbi	0x1c, 1	; 28
 488:	0f be       	out	0x3f, r0	; 63
 48a:	01 96       	adiw	r24, 0x01	; 1
 48c:	08 95       	ret

0000048e <_exit>:
 48e:	f8 94       	cli

00000490 <__stop_program>:
 490:	ff cf       	rjmp	.-2      	; 0x490 <__stop_program>
